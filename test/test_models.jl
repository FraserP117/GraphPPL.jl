using GraphPPL
using RxInfer
using Distributions
using Random
using Cairo
using Graphs
using MetaGraphsNext
using Dictionaries
using StableRNGs
using LinearAlgebra
using StatsPlots 
using DataFrames 
using CSV
using GLM


#### COIN TOSS MODEL ####
@model function coin_model(y, a, b)
    Œ∏ ~ Beta(a, b)
    for i in eachindex(y)
        y[i] ~ Bernoulli(Œ∏)
    end
end

# create the specified model and return the GraphPPL.Model
function create_coin_model()
    conditioned = coin_model(a = 2.0, b = 7.0) | (y = [ true, false, true ], )
    rxi_model = RxInfer.create_model(conditioned)
    return RxInfer.getmodel(rxi_model)
end


#### HIDDEN MARKOV MODEL ####
# Taken from: https://learnableloop.com/posts/FFGViz5_KE.html
@model function hidden_markov_model(x)
    B ~ MatrixDirichlet(ones(3, 3))
    A ~ MatrixDirichlet([10.0 1.0 1.0; 
                         1.0 10.0 1.0; 
                         1.0 1.0 10.0 ])    
    s‚ÇÄ ~ Categorical(fill(1.0/3.0, 3))
    
    s‚Çñ‚Çã‚ÇÅ = s‚ÇÄ
    for k in eachindex(x)
        s[k] ~ Transition(s‚Çñ‚Çã‚ÇÅ, B)
        x[k] ~ Transition(s[k], A)
        s‚Çñ‚Çã‚ÇÅ = s[k]
    end
end


# create the specified model and return the GraphPPL.Model
# Taken from: https://learnableloop.com/posts/FFGViz5_KE.html
function create_hmm_model()
    hmm_conditioned = hidden_markov_model() | (x = [[1.0, 0.0, 0.0], [0.0, 0.0, 1.0]],)
    hmm_rxi_model = RxInfer.create_model(hmm_conditioned)
    return RxInfer.getmodel(hmm_rxi_model)
end


#### LAR MODEL ####
# Taken from: https://learnableloop.com/posts/FFGViz5_KE.html
@model function lar_model(
    x, ##. data/observations 
    ùöÉ·¥¨·¥ø, ##. Uni/Multi variate 
    M·¥¨·¥ø, ##. AR order
    v·µ§, ##. unit vector 
    œÑ) ##. observation precision     
    ## Priors
    Œ≥  ~ Gamma(Œ± = 1.0, Œ≤ = 1.0) ##. for transition precision    
    if ùöÉ·¥¨·¥ø === Multivariate
        Œ∏  ~ MvNormal(Œº = zeros(M·¥¨·¥ø), Œõ = diageye(M·¥¨·¥ø)) ##.kw Œº,Œõ only work inside macro
        s‚ÇÄ ~ MvNormal(Œº = zeros(M·¥¨·¥ø), Œõ = diageye(M·¥¨·¥ø)) ##.kw Œº,Œõ only work inside macro
    else ## Univariate
        Œ∏  ~ Normal(Œº = 0.0, Œ≥ = 1.0)
        s‚ÇÄ ~ Normal(Œº = 0.0, Œ≥ = 1.0)
    end
    s‚Çú‚Çã‚ÇÅ = s‚ÇÄ
    for t in eachindex(x)
        s[t] ~ AR(s‚Çú‚Çã‚ÇÅ, Œ∏, Œ≥) #.Eq (2b)
        if ùöÉ·¥¨·¥ø === Multivariate
            x[t] ~ Normal(Œº = dot(v·µ§, s[t]), Œ≥ = œÑ) #.Eq (2c)
        else
            x[t] ~ Normal(Œº = v·µ§*s[t], Œ≥ = œÑ) #.Eq (2c)
        end
        s‚Çú‚Çã‚ÇÅ = s[t]
    end
end

# create the specified model and return the GraphPPL.Model
# Taken from: https://learnableloop.com/posts/FFGViz5_KE.html
function create_lar_model()
    ùöÉ·¥¨·¥ø = Univariate
    m = 1
    œÑÃÉ = 0.001 ## assumed observation precision
    lar_conditioned = lar_model(
        ùöÉ·¥¨·¥ø=ùöÉ·¥¨·¥ø, 
        M·¥¨·¥ø=m, 
        v·µ§=ReactiveMP.ar_unit(ùöÉ·¥¨·¥ø, m), 
        œÑ=œÑÃÉ
    ) | (x = [266.0, 145.0, 183.0],)

    lar_rxi_model = RxInfer.create_model(lar_conditioned)
    return RxInfer.getmodel(lar_rxi_model)
end


#### DRONE NAV MODEL ####
# Taken from: https://learnableloop.com/posts/FFGViz5_KE.html
@model function dronenav_model(x, m·µ§, V·µ§, m‚Çì, V‚Çì, m‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé, V‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé, T, R·µÉ)
    ## Transition function
    g = (s‚Çú‚Çã‚ÇÅ::AbstractVector) -> begin
        s‚Çú = similar(s‚Çú‚Çã‚ÇÅ) ## Next state
        s‚Çú = A·µÉ(s‚Çú‚Çã‚ÇÅ, 1.0) + s‚Çú‚Çã‚ÇÅ
        return s‚Çú
    end
    
    ## Function for modeling turn/yaw control
    h = (u::AbstractVector) -> R·µÉ(u[1])

    _Œ≥ = 1e4 ## transition precision (system noise)
    _œë = 1e-4 ## observation variance (observation noise)
    
    Œì = _Œ≥*diageye(4) ## Transition precision
    ùöØ = _œë*diageye(4) ## Observation variance
    
    ## s‚Çú‚Çã‚ÇÅ ~ MvNormal(mean=m‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé, cov=V‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé)
    s‚ÇÄ ~ MvNormal(mean=m‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé, cov=V‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé)
    ## s‚Çñ‚Çã‚ÇÅ = s‚Çú‚Çã‚ÇÅ
    s‚Çñ‚Çã‚ÇÅ = s‚ÇÄ
    
    local s

    for k in 1:T
        ## Control
        u[k] ~ MvNormal(mean=m·µ§[k], cov=V·µ§[k])
        hIuI[k] ~ h(u[k]) where { meta=DeltaMeta(method=Unscented()) }

        ## State transition
        gIsI[k] ~ g(s‚Çñ‚Çã‚ÇÅ) where { meta=DeltaMeta(method=Unscented()) }
        ghSum[k] ~ gIsI[k] + hIuI[k]#.
        s[k] ~ MvNormal(mean=ghSum[k], precision=Œì)

        ## Likelihood of future observations
        x[k] ~ MvNormal(mean=s[k], cov=ùöØ)

        ## Target/Goal prior
        x[k] ~ MvNormal(mean=m‚Çì[k], cov=V‚Çì[k])

        s‚Çñ‚Çã‚ÇÅ = s[k]
    end
    return (s, )
end

# create the specified model and return the GraphPPL.Model
# Taken from: https://learnableloop.com/posts/FFGViz5_KE.html
function create_drone_nav_model()
    _F·¥±‚Åø·µç·¥∏‚Å±·µê‚Å±·µó = 0.1

    function R·µÉ(a::Real) ## turn/yaw rate
        b = [ 0.0, 0.0, 1.0, 0.0 ]
        return b*_F·¥±‚Åø·µç·¥∏‚Å±·µê‚Å±·µó*tanh(a)
    end
    ## R·µÉ(0.25)

    # _Œ≥ = 1e4 ## transition precision (system noise) # OG LOCATION 
    # _œë = 1e-4 ## observation variance (observation noise) # OG LOCATION 

    ## T =_T·µÉ‚Å±,
    ## T =100
    T =3
    R·µÉ=R·µÉ

    m·µ§ = Vector{Float64}[ [0.0] for k=1:T ] ##Set control priors
    Œæ = 0.1
    Œû  = fill(Œæ, 1, 1) ##Control prior variance
    V·µ§ = Matrix{Float64}[ Œû for k=1:T ]
    m‚Çì      = [zeros(4) for k=1:T]
    x‚Çä = [0.0, 0.0, 0.0*œÄ, 0.1] ## Target/Goal state
    m‚Çì[end] = x‚Çä ##Set prior mean to reach target/goal at t=T
    V‚Çì      = [huge*diageye(4) for k=1:T]
    œÉ = 1e-4
    Œ£       = œÉ*diageye(4) ##Target/Goal prior variance
    V‚Çì[end] = Œ£ ##Set prior variance to reach target/goal at t=T
    s‚ÇÄ = [8.0, 8.0, -0.1, 0.1] ## initial state
    m‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé = s‚ÇÄ
    V‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé = tiny*diageye(4)

    drone_conditioned = dronenav_model(
        m·µ§= m·µ§, 
        V·µ§= V·µ§, 
        m‚Çì= m‚Çì, 
        V‚Çì= V‚Çì,
        m‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé= m‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé,
        V‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé= V‚Çõ‚Çç‚Çú‚Çã‚ÇÅ‚Çé,
        T=T, 
        R·µÉ=R·µÉ
    ) | (x = [ [8.099, 7.990, -0.109, 0.1],  [8.198, 7.979, -0.119, 0.1],  [8.298, 7.967, -0.129, 0.1]],)
    ## ) | (x = [ [8.099, 7.990, -0.109],  [8.198, 7.979, -0.119],  [8.298, 7.967, -0.129]],)

    drone_rxi_model = RxInfer.create_model(drone_conditioned)

    return RxInfer.getmodel(drone_rxi_model)
end